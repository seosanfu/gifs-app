{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","title","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","gif","key","GifExpertApp","c","ReactDOM","render","document","getElementById"],"mappings":"qMAgCeA,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAkBzC,OACE,0BAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEwB,KAAtBJ,EAAWK,SACbP,GAAc,SAAAQ,GAAU,OAAKN,GAAL,mBAAoBM,OAC5CL,EAAc,OAOd,2BAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAhBrB,SAACN,GACpBF,EAAcE,EAAEO,OAAOF,QAeyCG,YAAY,2B,uBCvBnEC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAUH,GADpF,sBAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UARM,kBAWdN,GAXc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBD,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IAEnC,OACE,yBAAKc,UAAU,4CACb,yBAAKC,IAAKf,EAAKgB,IAAKJ,IACpB,2BAAIA,KCHGK,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAmBxC,OAhBAC,qBAAU,WAERxB,EAAQC,GACLwB,MAAK,SAAAC,GAEJH,EACE,CACEf,KAAMkB,EACNL,SAAS,SAMhB,CAACpB,IAEGqB,EDhByBK,CAAa1B,GAA/BQ,EAFyB,EAE/BD,KAAYa,EAFmB,EAEnBA,QAEpB,OACE,oCACE,4BAAKpB,GAEJoB,GAAW,uBAAGJ,UAAU,oCAAb,eAEZ,yBAAKA,UAAU,aAEXR,EAAKC,KAAI,SAAAkB,GAAG,OAER,kBAAC,EAAD,eACEC,IAAKD,EAAIhB,IACLgB,UEALE,EAhBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,cAFrB,mBAElBO,EAFkB,KAENR,EAFM,KAIzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGQ,EAAWgB,KAAI,SAACqB,GAAD,OAAO,kBAAC,EAAD,CAASF,IAAKE,EAAG9B,SAAU8B,U,MCT1DC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.0ade5175.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim() !== '') {\r\n      setCategories(categories => [inputValue, ...categories]);\r\n      setInputValue('');\r\n    };\r\n\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleChange} placeholder=\"Escribe algo aqui...\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=kd3zNoPCN3QiRcnZ49aiXlWOIKwLvUOt&q=${encodeURI(category)}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      url: img.images?.downsized_medium.url,\r\n      title: img.title,\r\n    }\r\n  });\r\n  return gifs;\r\n};","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__bounceIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n\r\n};\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data: gifs, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {\r\n          gifs.map(gif =>\r\n            (\r\n              <GifGridItem\r\n                key={gif.id}\r\n                {...gif}\r\n              />\r\n            )\r\n          )\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n\r\n    getGifs(category)\r\n      .then(imgs => {\r\n\r\n        setState(\r\n          {\r\n            data: imgs,\r\n            loading: false,\r\n          }\r\n        );\r\n\r\n      });\r\n\r\n  }, [category]);\r\n\r\n  return state;\r\n\r\n};","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One punch']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((c) => <GifGrid key={c} category={c} />)}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}